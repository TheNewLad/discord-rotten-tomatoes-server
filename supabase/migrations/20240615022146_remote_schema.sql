
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "api";

ALTER SCHEMA "api" OWNER TO "postgres";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."requesting_user_clerk_id"() RETURNS "text"
    LANGUAGE "sql" STABLE
    AS $$select nullif(current_setting('request.jwt.claims', true)::json->>'sub', '')::text;$$;

ALTER FUNCTION "public"."requesting_user_clerk_id"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."requesting_user_id"() RETURNS bigint
    LANGUAGE "sql" STABLE
    AS $$select nullif(current_setting('request.jwt.claims', true)::json->>'app_user_id', '')::bigint;$$;

ALTER FUNCTION "public"."requesting_user_id"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."requesting_user_id0"() RETURNS bigint
    LANGUAGE "sql"
    AS $$select nullif(current_setting('request.jwt.claims', true)::json->>'app_user_id', '')::bigint;$$;

ALTER FUNCTION "public"."requesting_user_id0"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."programs" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "type" character varying,
    "imdb_id" "text" NOT NULL,
    "title" character varying,
    "poster_url" "text"
);

ALTER TABLE "public"."programs" OWNER TO "postgres";

ALTER TABLE "public"."programs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."programs_id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."reviews" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" bigint,
    "program_id" bigint,
    "scores" "jsonb"
);

ALTER TABLE "public"."reviews" OWNER TO "postgres";

ALTER TABLE "public"."reviews" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reviews_id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "discord_user_id" "text" NOT NULL,
    "review_weights" "jsonb",
    "clerk_user_id" "text" DEFAULT "public"."requesting_user_clerk_id"()
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE "public"."users" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."users_id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."programs"
    ADD CONSTRAINT "programs_imdbId_key1" UNIQUE ("imdb_id");

ALTER TABLE ONLY "public"."programs"
    ADD CONSTRAINT "programs_pkey1" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."reviews"
    ADD CONSTRAINT "reviews_pkey1" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_discord_user_id_key" UNIQUE ("discord_user_id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id", "discord_user_id");

CREATE POLICY "Enable insert for authenticated users only" ON "public"."users" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."users" FOR SELECT TO "authenticated" USING ((( SELECT "public"."requesting_user_id"() AS "requesting_user_id") = "id"));

CREATE POLICY "Enable select for user based on clerk_user_id" ON "public"."users" FOR SELECT TO "authenticated" USING ((( SELECT "public"."requesting_user_clerk_id"() AS "requesting_user_clerk_id") = "clerk_user_id"));

CREATE POLICY "Enable update access for users based on clerk_user_id" ON "public"."users" FOR UPDATE TO "authenticated" USING ((( SELECT "public"."requesting_user_clerk_id"() AS "requesting_user_clerk_id") = "clerk_user_id"));

ALTER TABLE "public"."programs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."reviews" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."requesting_user_clerk_id"() TO "anon";
GRANT ALL ON FUNCTION "public"."requesting_user_clerk_id"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."requesting_user_clerk_id"() TO "service_role";

GRANT ALL ON FUNCTION "public"."requesting_user_id"() TO "anon";
GRANT ALL ON FUNCTION "public"."requesting_user_id"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."requesting_user_id"() TO "service_role";

GRANT ALL ON FUNCTION "public"."requesting_user_id0"() TO "anon";
GRANT ALL ON FUNCTION "public"."requesting_user_id0"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."requesting_user_id0"() TO "service_role";

GRANT ALL ON TABLE "public"."programs" TO "anon";
GRANT ALL ON TABLE "public"."programs" TO "authenticated";
GRANT ALL ON TABLE "public"."programs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."programs_id_seq1" TO "anon";
GRANT ALL ON SEQUENCE "public"."programs_id_seq1" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."programs_id_seq1" TO "service_role";

GRANT ALL ON TABLE "public"."reviews" TO "anon";
GRANT ALL ON TABLE "public"."reviews" TO "authenticated";
GRANT ALL ON TABLE "public"."reviews" TO "service_role";

GRANT ALL ON SEQUENCE "public"."reviews_id_seq1" TO "anon";
GRANT ALL ON SEQUENCE "public"."reviews_id_seq1" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reviews_id_seq1" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

GRANT ALL ON SEQUENCE "public"."users_id_seq1" TO "anon";
GRANT ALL ON SEQUENCE "public"."users_id_seq1" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."users_id_seq1" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
